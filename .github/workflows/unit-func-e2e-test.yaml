name: unit-func-e2e-test

on:
  pull_request:
    branches: [ main ]
    paths:
      - ".github/workflows/unit-func-e2e-test.yaml"
      - "github_actions/deploy_cluster/**"
      - "**.go"
      - "**.yaml"
      - "!capm.yaml"
      - "!osc-secret.yaml"
      - "!example/**.yaml"
      - "!testclean/**"
      - "!helm/**"
      - "Makefile"
      - "hack/*.sh"
      - "!docs/src/**"
      - "!hack/json-format/*.sh"
      - "!hack/json-format/src/*.rs"
      - "!hack/json-format/Makefile"
      - "!hack/json-format/Cargo.*"
      - "!hack/json-format/tests/*.rs"
jobs:
  unit_test:
    runs-on: ubuntu-latest
    steps:
    - name: ‚¨áÔ∏è Checkout repository
      uses: actions/checkout@v4
    - name: ‚¨áÔ∏è Install Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
    - name: üß™ unit tests
      run: |
        make unit-test
        cat covers.txt
      shell: bash  
  e2etest:
    runs-on: [self-hosted, linux]
    needs: [unit_test]
    steps:
    - name: ‚¨áÔ∏è Checkout repository
      uses: actions/checkout@v4
    - name: ‚¨áÔ∏è Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: v1.30.7
    - name: ‚¨áÔ∏è Install helm
      uses: azure/setup-helm@v4
    - name: ‚¨áÔ∏è Install kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: v4.5.7
    - name: üîé Check IP
      id: ip
      run: echo "ip=`curl -s https://api.ipify.org`" | tee $GITHUB_OUTPUT
    - name: üîê Set ak/sk name based on runner region
      run: .github/scripts/runneraksk.sh
    - name: üßπ Frieza
      uses: outscale/frieza-github-actions/frieza-clean@master
      with:
        access_key: ${{ secrets[env.OSC_ACCESS_KEY_NAME] }}
        secret_key: ${{ secrets[env.OSC_SECRET_KEY_NAME] }}
        region: ${{ env.OSC_REGION }}
    - name: üë∑ Deploy management cluster
      id: management
      uses: ./github_actions/deploy_cluster
      with:
        RUNNER_NAME: ${{ runner.name }}
        OKS_ACCESS_KEY: ${{ secrets.OSC_ACCESS_KEY_OKS }}
        OKS_SECRET_KEY: ${{ secrets.OSC_SECRET_KEY_OKS }}
        OKS_REGION: ${{ vars.OKS_REGION }}
        OSC_ACCESS_KEY: ${{ secrets[env.OSC_ACCESS_KEY_NAME] }}
        OSC_SECRET_KEY: ${{ secrets[env.OSC_SECRET_KEY_NAME] }}
        OSC_REGION: ${{ env.OSC_REGION }}
        CLUSTER_NAME: "caposc"
        IMAGE_NAME: ${{ vars[env.IMG_MANAGEMENT_NAME] }}
        CERT_MANAGER: "true"
    - name: ‚¨áÔ∏è Install Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
    - name: üì¶ Build and push Docker image 
      run: |
        docker login ${{ vars.REGISTRY }} -u admin -p ${{ secrets.HARBOR_ADMIN_PASSWORD }}
        sudo apt-get update
        sudo apt install -y docker-buildx-plugin 
        make docker-buildx
        make docker-push
        docker image prune -a -f
      env:
        IMG: ${{ vars.REGISTRY }}/outscale/cluster-api-outscale-controllers:${{ github.sha }}
        DOCKER_BUILDKIT: 1
    - name: üîê Create CAPOSC ns and credentials
      run: make credential
      shell: bash
      env:
        KUBECONFIG: "${{ github.workspace }}/${{ steps.management.outputs.KUBECONFIG }}"
        OSC_ACCESS_KEY: ${{ secrets[env.OSC_ACCESS_KEY_NAME] }}
        OSC_SECRET_KEY: ${{ secrets[env.OSC_SECRET_KEY_NAME] }}
    - name: üß™ Launch e2e tests
      run: make e2etest
      shell: bash
      id: e2etest
      env:
        KUBECONFIG: "${{ github.workspace }}/${{ steps.management.outputs.KUBECONFIG }}"
        CCM_OSC_ACCESS_KEY: ${{ secrets[env.OSC_ACCESS_KEY_NAME] }}
        CCM_OSC_SECRET_KEY: ${{ secrets[env.OSC_SECRET_KEY_NAME] }}
        CCM_OSC_REGION: $${{ env.OSC_REGION }}
        IMG: ${{ vars.REGISTRY }}/outscale/cluster-api-outscale-controllers:${{ github.sha }}
        IMG_UPGRADE_FROM: ${{ vars[env.IMG_UPGRADE_FROM_NAME] }}
        IMG_UPGRADE_TO: ${{ vars[env.IMG_UPGRADE_TO_NAME] }}
    - name: üìù Get CAPOSC state/logs
      run: |
        echo "**** pod state"
        kubectl describe po -n cluster-api-provider-outscale-system
        echo "**** pod logs"
        make logs-capo
      if: ${{ failure() && steps.e2etest.conclusion == 'failure' }}
      shell: bash
      env:
        KUBECONFIG: "${{ github.workspace }}/${{ steps.management.outputs.KUBECONFIG }}"
        CAPO_NAMESPACE: cluster-api-provider-outscale-system
    - name: üìù Get cluster api logs
      run: make logs-capi
      if: ${{ failure() && steps.e2etest.conclusion == 'failure' }}
      shell: bash
      env:
        KUBECONFIG: "${{ github.workspace }}/${{ steps.management.outputs.KUBECONFIG }}"
        CAPI_NAMESPACE: capi-kubeadm-bootstrap-system      
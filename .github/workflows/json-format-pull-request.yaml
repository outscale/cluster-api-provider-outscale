name: validate-with-test
on:
  pull_request:
    branches:
      - 'main'
    paths:
      - "!**.go"
      - "!**.yaml"
      - "!capm.yaml"
      - "!osc-secret.yaml"
      - "!example/**.yaml"
      - "!helm/**"
      - "!Makefile"
      - "!docs/src/**"
      - "hack/json-format/*.sh"
      - "hack/json-format/src/*.rs"
      - "hack/json-format/Makefile"
      - "hack/json-format/Cargo.*"
      - "hack/json-format/tests/*.rs"
  push:
    branches:
      - 'main'
    paths:
      - "!**.go"
      - "!**.yaml"
      - "!capm.yaml"
      - "!osc-secret.yaml"
      - "!example/**.yaml"
      - "!helm/**"
      - "!Makefile"
      - "!docs/src/**"
      - "hack/json-format/*.sh"
      - "hack/json-format/src/*.rs"
      - "hack/json-format/Makefile"
      - "hack/json-format/Cargo.*"
      - "hack/json-format/tests/*.rs"
jobs:
  validate-format-test:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout json-format
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Use Rust with rustfmt
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: rustfmt, clippy
    - name: Check Code format
      run: make format-test
      working-directory: ${{ github.workspace }}/hack/json-format
      shell: bash
  validate-cargo-test:
    environment: eu-west-2
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout json-format
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Use Rust with rustfmt
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Run tests
      run: make cargo-test
      working-directory: ${{ github.workspace }}/hack/json-format
      shell: bash
  integration-test:
    environment: eu-west-2
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout json-format
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Use Rust with rustfmt
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: x86_64-unknown-linux-musl
    - name: Build json-format
      run: make build
      working-directory: ${{ github.workspace }}/hack/json-format
      shell: bash
    - name: Run integration-test
      run: make integration-test
      working-directory: ${{ github.workspace }}/hack/json-format
      shell: bash  
      env:
        WORKING_BINARY_DIRECTORY: "${{ github.workspace }}/hack/json-format/target/x86_64-unknown-linux-musl/release"

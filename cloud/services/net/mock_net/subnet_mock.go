// Code generated by MockGen. DO NOT EDIT.
// Source: ./subnet.go
//
// Generated by this command:
//
//	mockgen -destination mock_net/subnet_mock.go -package mock_net -source ./subnet.go
//

// Package mock_net is a generated GoMock package.
package mock_net

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/outscale/cluster-api-provider-outscale/api/v1beta1"
	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOscSubnetInterface is a mock of OscSubnetInterface interface.
type MockOscSubnetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscSubnetInterfaceMockRecorder
	isgomock struct{}
}

// MockOscSubnetInterfaceMockRecorder is the mock recorder for MockOscSubnetInterface.
type MockOscSubnetInterfaceMockRecorder struct {
	mock *MockOscSubnetInterface
}

// NewMockOscSubnetInterface creates a new mock instance.
func NewMockOscSubnetInterface(ctrl *gomock.Controller) *MockOscSubnetInterface {
	mock := &MockOscSubnetInterface{ctrl: ctrl}
	mock.recorder = &MockOscSubnetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscSubnetInterface) EXPECT() *MockOscSubnetInterfaceMockRecorder {
	return m.recorder
}

// CreateSubnet mocks base method.
func (m *MockOscSubnetInterface) CreateSubnet(ctx context.Context, spec *v1beta1.OscSubnet, netId, clusterName, subnetName string) (*osc.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", ctx, spec, netId, clusterName, subnetName)
	ret0, _ := ret[0].(*osc.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockOscSubnetInterfaceMockRecorder) CreateSubnet(ctx, spec, netId, clusterName, subnetName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockOscSubnetInterface)(nil).CreateSubnet), ctx, spec, netId, clusterName, subnetName)
}

// DeleteSubnet mocks base method.
func (m *MockOscSubnetInterface) DeleteSubnet(ctx context.Context, subnetId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", ctx, subnetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockOscSubnetInterfaceMockRecorder) DeleteSubnet(ctx, subnetId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockOscSubnetInterface)(nil).DeleteSubnet), ctx, subnetId)
}

// GetSubnet mocks base method.
func (m *MockOscSubnetInterface) GetSubnet(ctx context.Context, subnetId string) (*osc.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", ctx, subnetId)
	ret0, _ := ret[0].(*osc.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockOscSubnetInterfaceMockRecorder) GetSubnet(ctx, subnetId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockOscSubnetInterface)(nil).GetSubnet), ctx, subnetId)
}

// GetSubnetIdsFromNetIds mocks base method.
func (m *MockOscSubnetInterface) GetSubnetIdsFromNetIds(ctx context.Context, netId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetIdsFromNetIds", ctx, netId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetIdsFromNetIds indicates an expected call of GetSubnetIdsFromNetIds.
func (mr *MockOscSubnetInterfaceMockRecorder) GetSubnetIdsFromNetIds(ctx, netId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetIdsFromNetIds", reflect.TypeOf((*MockOscSubnetInterface)(nil).GetSubnetIdsFromNetIds), ctx, netId)
}

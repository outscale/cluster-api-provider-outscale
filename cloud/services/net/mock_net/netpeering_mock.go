// Code generated by MockGen. DO NOT EDIT.
// Source: ./netpeering.go
//
// Generated by this command:
//
//	mockgen -destination mock_net/netpeering_mock.go -package mock_net -source ./netpeering.go
//

// Package mock_net is a generated GoMock package.
package mock_net

import (
	context "context"
	reflect "reflect"

	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOscNetPeeringInterface is a mock of OscNetPeeringInterface interface.
type MockOscNetPeeringInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscNetPeeringInterfaceMockRecorder
	isgomock struct{}
}

// MockOscNetPeeringInterfaceMockRecorder is the mock recorder for MockOscNetPeeringInterface.
type MockOscNetPeeringInterfaceMockRecorder struct {
	mock *MockOscNetPeeringInterface
}

// NewMockOscNetPeeringInterface creates a new mock instance.
func NewMockOscNetPeeringInterface(ctrl *gomock.Controller) *MockOscNetPeeringInterface {
	mock := &MockOscNetPeeringInterface{ctrl: ctrl}
	mock.recorder = &MockOscNetPeeringInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscNetPeeringInterface) EXPECT() *MockOscNetPeeringInterfaceMockRecorder {
	return m.recorder
}

// AcceptNetPeering mocks base method.
func (m *MockOscNetPeeringInterface) AcceptNetPeering(ctx context.Context, netPeeringID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptNetPeering", ctx, netPeeringID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptNetPeering indicates an expected call of AcceptNetPeering.
func (mr *MockOscNetPeeringInterfaceMockRecorder) AcceptNetPeering(ctx, netPeeringID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptNetPeering", reflect.TypeOf((*MockOscNetPeeringInterface)(nil).AcceptNetPeering), ctx, netPeeringID)
}

// CreateNetPeering mocks base method.
func (m *MockOscNetPeeringInterface) CreateNetPeering(ctx context.Context, netID, mgmtNetID, mgmtAccountID, clusterID string) (*osc.NetPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetPeering", ctx, netID, mgmtNetID, mgmtAccountID, clusterID)
	ret0, _ := ret[0].(*osc.NetPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetPeering indicates an expected call of CreateNetPeering.
func (mr *MockOscNetPeeringInterfaceMockRecorder) CreateNetPeering(ctx, netID, mgmtNetID, mgmtAccountID, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetPeering", reflect.TypeOf((*MockOscNetPeeringInterface)(nil).CreateNetPeering), ctx, netID, mgmtNetID, mgmtAccountID, clusterID)
}

// DeleteNetPeering mocks base method.
func (m *MockOscNetPeeringInterface) DeleteNetPeering(ctx context.Context, netPeeringID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetPeering", ctx, netPeeringID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetPeering indicates an expected call of DeleteNetPeering.
func (mr *MockOscNetPeeringInterfaceMockRecorder) DeleteNetPeering(ctx, netPeeringID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetPeering", reflect.TypeOf((*MockOscNetPeeringInterface)(nil).DeleteNetPeering), ctx, netPeeringID)
}

// GetNetPeering mocks base method.
func (m *MockOscNetPeeringInterface) GetNetPeering(ctx context.Context, netPeeringID string) (*osc.NetPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetPeering", ctx, netPeeringID)
	ret0, _ := ret[0].(*osc.NetPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetPeering indicates an expected call of GetNetPeering.
func (mr *MockOscNetPeeringInterfaceMockRecorder) GetNetPeering(ctx, netPeeringID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetPeering", reflect.TypeOf((*MockOscNetPeeringInterface)(nil).GetNetPeering), ctx, netPeeringID)
}

// GetNetPeeringFromNet mocks base method.
func (m *MockOscNetPeeringInterface) GetNetPeeringFromNet(ctx context.Context, netID, mgmtNetID, mgmtAccountID string) (*osc.NetPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetPeeringFromNet", ctx, netID, mgmtNetID, mgmtAccountID)
	ret0, _ := ret[0].(*osc.NetPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetPeeringFromNet indicates an expected call of GetNetPeeringFromNet.
func (mr *MockOscNetPeeringInterfaceMockRecorder) GetNetPeeringFromNet(ctx, netID, mgmtNetID, mgmtAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetPeeringFromNet", reflect.TypeOf((*MockOscNetPeeringInterface)(nil).GetNetPeeringFromNet), ctx, netID, mgmtNetID, mgmtAccountID)
}

// ListNetPeerings mocks base method.
func (m *MockOscNetPeeringInterface) ListNetPeerings(ctx context.Context, netId string) ([]osc.NetPeering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetPeerings", ctx, netId)
	ret0, _ := ret[0].([]osc.NetPeering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetPeerings indicates an expected call of ListNetPeerings.
func (mr *MockOscNetPeeringInterfaceMockRecorder) ListNetPeerings(ctx, netId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetPeerings", reflect.TypeOf((*MockOscNetPeeringInterface)(nil).ListNetPeerings), ctx, netId)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./netaccesspoint.go
//
// Generated by this command:
//
//	mockgen -destination mock_net/netaccesspoint_mock.go -package mock_net -source ./netaccesspoint.go
//

// Package mock_net is a generated GoMock package.
package mock_net

import (
	context "context"
	reflect "reflect"

	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOscNetAccessPointInterface is a mock of OscNetAccessPointInterface interface.
type MockOscNetAccessPointInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscNetAccessPointInterfaceMockRecorder
	isgomock struct{}
}

// MockOscNetAccessPointInterfaceMockRecorder is the mock recorder for MockOscNetAccessPointInterface.
type MockOscNetAccessPointInterfaceMockRecorder struct {
	mock *MockOscNetAccessPointInterface
}

// NewMockOscNetAccessPointInterface creates a new mock instance.
func NewMockOscNetAccessPointInterface(ctrl *gomock.Controller) *MockOscNetAccessPointInterface {
	mock := &MockOscNetAccessPointInterface{ctrl: ctrl}
	mock.recorder = &MockOscNetAccessPointInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscNetAccessPointInterface) EXPECT() *MockOscNetAccessPointInterfaceMockRecorder {
	return m.recorder
}

// CreateNetAccessPoint mocks base method.
func (m *MockOscNetAccessPointInterface) CreateNetAccessPoint(ctx context.Context, netId, region, service string, rtblIds []string, clusterID string) (*osc.NetAccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetAccessPoint", ctx, netId, region, service, rtblIds, clusterID)
	ret0, _ := ret[0].(*osc.NetAccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetAccessPoint indicates an expected call of CreateNetAccessPoint.
func (mr *MockOscNetAccessPointInterfaceMockRecorder) CreateNetAccessPoint(ctx, netId, region, service, rtblIds, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetAccessPoint", reflect.TypeOf((*MockOscNetAccessPointInterface)(nil).CreateNetAccessPoint), ctx, netId, region, service, rtblIds, clusterID)
}

// DeleteNetAccessPoint mocks base method.
func (m *MockOscNetAccessPointInterface) DeleteNetAccessPoint(ctx context.Context, netAccessPointId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetAccessPoint", ctx, netAccessPointId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetAccessPoint indicates an expected call of DeleteNetAccessPoint.
func (mr *MockOscNetAccessPointInterfaceMockRecorder) DeleteNetAccessPoint(ctx, netAccessPointId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetAccessPoint", reflect.TypeOf((*MockOscNetAccessPointInterface)(nil).DeleteNetAccessPoint), ctx, netAccessPointId)
}

// GetNetAccessPoint mocks base method.
func (m *MockOscNetAccessPointInterface) GetNetAccessPoint(ctx context.Context, netAccessPointId string) (*osc.NetAccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetAccessPoint", ctx, netAccessPointId)
	ret0, _ := ret[0].(*osc.NetAccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetAccessPoint indicates an expected call of GetNetAccessPoint.
func (mr *MockOscNetAccessPointInterfaceMockRecorder) GetNetAccessPoint(ctx, netAccessPointId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetAccessPoint", reflect.TypeOf((*MockOscNetAccessPointInterface)(nil).GetNetAccessPoint), ctx, netAccessPointId)
}

// GetNetAccessPointFor mocks base method.
func (m *MockOscNetAccessPointInterface) GetNetAccessPointFor(ctx context.Context, netId, region, service string) (*osc.NetAccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetAccessPointFor", ctx, netId, region, service)
	ret0, _ := ret[0].(*osc.NetAccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetAccessPointFor indicates an expected call of GetNetAccessPointFor.
func (mr *MockOscNetAccessPointInterfaceMockRecorder) GetNetAccessPointFor(ctx, netId, region, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetAccessPointFor", reflect.TypeOf((*MockOscNetAccessPointInterface)(nil).GetNetAccessPointFor), ctx, netId, region, service)
}

// ListNetAccessPoints mocks base method.
func (m *MockOscNetAccessPointInterface) ListNetAccessPoints(ctx context.Context, netId string) ([]osc.NetAccessPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetAccessPoints", ctx, netId)
	ret0, _ := ret[0].([]osc.NetAccessPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetAccessPoints indicates an expected call of ListNetAccessPoints.
func (mr *MockOscNetAccessPointInterfaceMockRecorder) ListNetAccessPoints(ctx, netId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetAccessPoints", reflect.TypeOf((*MockOscNetAccessPointInterface)(nil).ListNetAccessPoints), ctx, netId)
}

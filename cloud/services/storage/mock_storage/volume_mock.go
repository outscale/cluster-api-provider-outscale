// Code generated by MockGen. DO NOT EDIT.

// Source: ./volume.go

// Package mock_storage is a generated GoMock package.

/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package mock_storage

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/outscale-dev/cluster-api-provider-outscale.git/api/v1beta1"
	osc "github.com/outscale/osc-sdk-go/v2"
)

// MockOscVolumeInterface is a mock of OscVolumeInterface interface.
type MockOscVolumeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscVolumeInterfaceMockRecorder
}

// MockOscVolumeInterfaceMockRecorder is the mock recorder for MockOscVolumeInterface.
type MockOscVolumeInterfaceMockRecorder struct {
	mock *MockOscVolumeInterface
}

// NewMockOscVolumeInterface creates a new mock instance.
func NewMockOscVolumeInterface(ctrl *gomock.Controller) *MockOscVolumeInterface {
	mock := &MockOscVolumeInterface{ctrl: ctrl}
	mock.recorder = &MockOscVolumeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscVolumeInterface) EXPECT() *MockOscVolumeInterfaceMockRecorder {
	return m.recorder
}

// CheckVolumeState mocks base method.
func (m *MockOscVolumeInterface) CheckVolumeState(clockInsideLoop, clockLoop time.Duration, state, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVolumeState", clockInsideLoop, clockLoop, state, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckVolumeState indicates an expected call of CheckVolumeState.
func (mr *MockOscVolumeInterfaceMockRecorder) CheckVolumeState(clockInsideLoop, clockLoop, state, volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVolumeState", reflect.TypeOf((*MockOscVolumeInterface)(nil).CheckVolumeState), clockInsideLoop, clockLoop, state, volumeID)
}

// CreateVolume mocks base method.
func (m *MockOscVolumeInterface) CreateVolume(spec *v1beta1.OscVolume, volumeName string) (*osc.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", spec, volumeName)
	ret0, _ := ret[0].(*osc.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockOscVolumeInterfaceMockRecorder) CreateVolume(spec, volumeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockOscVolumeInterface)(nil).CreateVolume), spec, volumeName)
}

// DeleteVolume mocks base method.
func (m *MockOscVolumeInterface) DeleteVolume(volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockOscVolumeInterfaceMockRecorder) DeleteVolume(volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockOscVolumeInterface)(nil).DeleteVolume), volumeID)
}

// GetVolume mocks base method.
func (m *MockOscVolumeInterface) GetVolume(volumeID string) (*osc.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", volumeID)
	ret0, _ := ret[0].(*osc.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockOscVolumeInterfaceMockRecorder) GetVolume(volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockOscVolumeInterface)(nil).GetVolume), volumeID)
}

// LinkVolume mocks base method.
func (m *MockOscVolumeInterface) LinkVolume(volumeID, vmID, deviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkVolume", volumeID, vmID, deviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkVolume indicates an expected call of LinkVolume.
func (mr *MockOscVolumeInterfaceMockRecorder) LinkVolume(volumeID, vmID, deviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkVolume", reflect.TypeOf((*MockOscVolumeInterface)(nil).LinkVolume), volumeID, vmID, deviceName)
}

// UnlinkVolume mocks base method.
func (m *MockOscVolumeInterface) UnlinkVolume(volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkVolume", volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkVolume indicates an expected call of UnlinkVolume.
func (mr *MockOscVolumeInterfaceMockRecorder) UnlinkVolume(volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkVolume", reflect.TypeOf((*MockOscVolumeInterface)(nil).UnlinkVolume), volumeID)
}

// ValidateVolumeIds mocks base method.
func (m *MockOscVolumeInterface) ValidateVolumeIds(volumeIDs []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVolumeIds", volumeIDs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateVolumeIds indicates an expected call of ValidateVolumeIds.
func (mr *MockOscVolumeInterfaceMockRecorder) ValidateVolumeIds(volumeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVolumeIds", reflect.TypeOf((*MockOscVolumeInterface)(nil).ValidateVolumeIds), volumeIDs)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./image.go
//
// Generated by this command:
//
//	mockgen -destination mock_compute/image_mock.go -package mock_compute -source ./image.go
//

// Package mock_compute is a generated GoMock package.
package mock_compute

import (
	context "context"
	reflect "reflect"

	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOscImageInterface is a mock of OscImageInterface interface.
type MockOscImageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscImageInterfaceMockRecorder
	isgomock struct{}
}

// MockOscImageInterfaceMockRecorder is the mock recorder for MockOscImageInterface.
type MockOscImageInterfaceMockRecorder struct {
	mock *MockOscImageInterface
}

// NewMockOscImageInterface creates a new mock instance.
func NewMockOscImageInterface(ctrl *gomock.Controller) *MockOscImageInterface {
	mock := &MockOscImageInterface{ctrl: ctrl}
	mock.recorder = &MockOscImageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscImageInterface) EXPECT() *MockOscImageInterfaceMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockOscImageInterface) GetImage(ctx context.Context, imageId string) (*osc.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imageId)
	ret0, _ := ret[0].(*osc.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockOscImageInterfaceMockRecorder) GetImage(ctx, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockOscImageInterface)(nil).GetImage), ctx, imageId)
}

// GetImageId mocks base method.
func (m *MockOscImageInterface) GetImageId(ctx context.Context, imageName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageId", ctx, imageName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageId indicates an expected call of GetImageId.
func (mr *MockOscImageInterfaceMockRecorder) GetImageId(ctx, imageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageId", reflect.TypeOf((*MockOscImageInterface)(nil).GetImageId), ctx, imageName)
}

// GetImageName mocks base method.
func (m *MockOscImageInterface) GetImageName(ctx context.Context, imageId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageName", ctx, imageId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageName indicates an expected call of GetImageName.
func (mr *MockOscImageInterfaceMockRecorder) GetImageName(ctx, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageName", reflect.TypeOf((*MockOscImageInterface)(nil).GetImageName), ctx, imageId)
}

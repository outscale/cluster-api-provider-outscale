// Code generated by MockGen. DO NOT EDIT.
// Source: ./vm.go

// Package mock_compute is a generated GoMock package.
package mock_compute

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/outscale-dev/cluster-api-provider-outscale.git/api/v1beta1"
	scope "github.com/outscale-dev/cluster-api-provider-outscale.git/cloud/scope"
	osc "github.com/outscale/osc-sdk-go/v2"
)

// MockOscVMInterface is a mock of OscVMInterface interface.
type MockOscVMInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscVMInterfaceMockRecorder
}

// MockOscVMInterfaceMockRecorder is the mock recorder for MockOscVMInterface.
type MockOscVMInterfaceMockRecorder struct {
	mock *MockOscVMInterface
}

// NewMockOscVMInterface creates a new mock instance.
func NewMockOscVMInterface(ctrl *gomock.Controller) *MockOscVMInterface {
	mock := &MockOscVMInterface{ctrl: ctrl}
	mock.recorder = &MockOscVMInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscVMInterface) EXPECT() *MockOscVMInterfaceMockRecorder {
	return m.recorder
}

// CheckVMState mocks base method.
func (m *MockOscVMInterface) CheckVMState(clockInsideLoop, clockLoop time.Duration, state, vmID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVMState", clockInsideLoop, clockLoop, state, vmID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckVMState indicates an expected call of CheckVMState.
func (mr *MockOscVMInterfaceMockRecorder) CheckVMState(clockInsideLoop, clockLoop, state, vmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVMState", reflect.TypeOf((*MockOscVMInterface)(nil).CheckVMState), clockInsideLoop, clockLoop, state, vmID)
}

// CreateVM mocks base method.
func (m *MockOscVMInterface) CreateVM(machineScope *scope.MachineScope, spec *v1beta1.OscVM, subnetID string, securityGroupIds, privateIps []string, vmName string) (*osc.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", machineScope, spec, subnetID, securityGroupIds, privateIps, vmName)
	ret0, _ := ret[0].(*osc.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockOscVMInterfaceMockRecorder) CreateVM(machineScope, spec, subnetID, securityGroupIds, privateIps, vmName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockOscVMInterface)(nil).CreateVM), machineScope, spec, subnetID, securityGroupIds, privateIps, vmName)
}

// DeleteVM mocks base method.
func (m *MockOscVMInterface) DeleteVM(vmID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVM", vmID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockOscVMInterfaceMockRecorder) DeleteVM(vmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockOscVMInterface)(nil).DeleteVM), vmID)
}

// GetVM mocks base method.
func (m *MockOscVMInterface) GetVM(vmID string) (*osc.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVM", vmID)
	ret0, _ := ret[0].(*osc.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVM indicates an expected call of GetVM.
func (mr *MockOscVMInterfaceMockRecorder) GetVM(vmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVM", reflect.TypeOf((*MockOscVMInterface)(nil).GetVM), vmID)
}

// GetVMState mocks base method.
func (m *MockOscVMInterface) GetVMState(vmID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMState", vmID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMState indicates an expected call of GetVMState.
func (mr *MockOscVMInterfaceMockRecorder) GetVMState(vmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMState", reflect.TypeOf((*MockOscVMInterface)(nil).GetVMState), vmID)
}

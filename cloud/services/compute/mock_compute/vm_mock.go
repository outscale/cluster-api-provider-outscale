// Code generated by MockGen. DO NOT EDIT.
// Source: ./vm.go

// Package mock_compute is a generated GoMock package.
package mock_compute

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/outscale-dev/cluster-api-provider-outscale.git/api/v1beta1"
	scope "github.com/outscale-dev/cluster-api-provider-outscale.git/cloud/scope"
	osc "github.com/outscale/osc-sdk-go/v2"
	v1 "k8s.io/api/core/v1"
)

// MockOscVmInterface is a mock of OscVmInterface interface.
type MockOscVmInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscVmInterfaceMockRecorder
}

// MockOscVmInterfaceMockRecorder is the mock recorder for MockOscVmInterface.
type MockOscVmInterfaceMockRecorder struct {
	mock *MockOscVmInterface
}

// NewMockOscVmInterface creates a new mock instance.
func NewMockOscVmInterface(ctrl *gomock.Controller) *MockOscVmInterface {
	mock := &MockOscVmInterface{ctrl: ctrl}
	mock.recorder = &MockOscVmInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscVmInterface) EXPECT() *MockOscVmInterfaceMockRecorder {
	return m.recorder
}

// AddCcmTag mocks base method.
func (m *MockOscVmInterface) AddCcmTag(clusterName, hostname, vmId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCcmTag", clusterName, hostname, vmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCcmTag indicates an expected call of AddCcmTag.
func (mr *MockOscVmInterfaceMockRecorder) AddCcmTag(clusterName, hostname, vmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCcmTag", reflect.TypeOf((*MockOscVmInterface)(nil).AddCcmTag), clusterName, hostname, vmId)
}

// CheckVmState mocks base method.
func (m *MockOscVmInterface) CheckVmState(clockInsideLoop, clockLoop time.Duration, state, vmId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVmState", clockInsideLoop, clockLoop, state, vmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckVmState indicates an expected call of CheckVmState.
func (mr *MockOscVmInterfaceMockRecorder) CheckVmState(clockInsideLoop, clockLoop, state, vmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVmState", reflect.TypeOf((*MockOscVmInterface)(nil).CheckVmState), clockInsideLoop, clockLoop, state, vmId)
}

// CreateVm mocks base method.
func (m *MockOscVmInterface) CreateVm(machineScope *scope.MachineScope, spec *v1beta1.OscVm, subnetId string, securityGroupIds, privateIps []string, vmName string) (*osc.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVm", machineScope, spec, subnetId, securityGroupIds, privateIps, vmName)
	ret0, _ := ret[0].(*osc.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVm indicates an expected call of CreateVm.
func (mr *MockOscVmInterfaceMockRecorder) CreateVm(machineScope, spec, subnetId, securityGroupIds, privateIps, vmName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVm", reflect.TypeOf((*MockOscVmInterface)(nil).CreateVm), machineScope, spec, subnetId, securityGroupIds, privateIps, vmName)
}

// DeleteVm mocks base method.
func (m *MockOscVmInterface) DeleteVm(vmId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVm", vmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVm indicates an expected call of DeleteVm.
func (mr *MockOscVmInterfaceMockRecorder) DeleteVm(vmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVm", reflect.TypeOf((*MockOscVmInterface)(nil).DeleteVm), vmId)
}

// GetCapacity mocks base method.
func (m *MockOscVmInterface) GetCapacity(tagKey, tagValue, vmType string) (v1.ResourceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapacity", tagKey, tagValue, vmType)
	ret0, _ := ret[0].(v1.ResourceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacity indicates an expected call of GetCapacity.
func (mr *MockOscVmInterfaceMockRecorder) GetCapacity(tagKey, tagValue, vmType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockOscVmInterface)(nil).GetCapacity), tagKey, tagValue, vmType)
}

// GetVm mocks base method.
func (m *MockOscVmInterface) GetVm(vmId string) (*osc.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVm", vmId)
	ret0, _ := ret[0].(*osc.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVm indicates an expected call of GetVm.
func (mr *MockOscVmInterfaceMockRecorder) GetVm(vmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVm", reflect.TypeOf((*MockOscVmInterface)(nil).GetVm), vmId)
}

// GetVmState mocks base method.
func (m *MockOscVmInterface) GetVmState(vmId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVmState", vmId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVmState indicates an expected call of GetVmState.
func (mr *MockOscVmInterfaceMockRecorder) GetVmState(vmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVmState", reflect.TypeOf((*MockOscVmInterface)(nil).GetVmState), vmId)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./publicip.go
//
// Generated by this command:
//
//	mockgen -destination mock_security/publicip_mock.go -package mock_security -source ./publicip.go
//

// Package mock_security is a generated GoMock package.
package mock_security

import (
	context "context"
	reflect "reflect"

	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOscPublicIpInterface is a mock of OscPublicIpInterface interface.
type MockOscPublicIpInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscPublicIpInterfaceMockRecorder
	isgomock struct{}
}

// MockOscPublicIpInterfaceMockRecorder is the mock recorder for MockOscPublicIpInterface.
type MockOscPublicIpInterfaceMockRecorder struct {
	mock *MockOscPublicIpInterface
}

// NewMockOscPublicIpInterface creates a new mock instance.
func NewMockOscPublicIpInterface(ctrl *gomock.Controller) *MockOscPublicIpInterface {
	mock := &MockOscPublicIpInterface{ctrl: ctrl}
	mock.recorder = &MockOscPublicIpInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscPublicIpInterface) EXPECT() *MockOscPublicIpInterfaceMockRecorder {
	return m.recorder
}

// CreatePublicIp mocks base method.
func (m *MockOscPublicIpInterface) CreatePublicIp(ctx context.Context, publicIpName, clusterID string) (*osc.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicIp", ctx, publicIpName, clusterID)
	ret0, _ := ret[0].(*osc.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicIp indicates an expected call of CreatePublicIp.
func (mr *MockOscPublicIpInterfaceMockRecorder) CreatePublicIp(ctx, publicIpName, clusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicIp", reflect.TypeOf((*MockOscPublicIpInterface)(nil).CreatePublicIp), ctx, publicIpName, clusterID)
}

// DeletePublicIp mocks base method.
func (m *MockOscPublicIpInterface) DeletePublicIp(ctx context.Context, publicIpId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicIp", ctx, publicIpId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicIp indicates an expected call of DeletePublicIp.
func (mr *MockOscPublicIpInterfaceMockRecorder) DeletePublicIp(ctx, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicIp", reflect.TypeOf((*MockOscPublicIpInterface)(nil).DeletePublicIp), ctx, publicIpId)
}

// GetPublicIp mocks base method.
func (m *MockOscPublicIpInterface) GetPublicIp(ctx context.Context, publicIpId string) (*osc.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicIp", ctx, publicIpId)
	ret0, _ := ret[0].(*osc.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicIp indicates an expected call of GetPublicIp.
func (mr *MockOscPublicIpInterfaceMockRecorder) GetPublicIp(ctx, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicIp", reflect.TypeOf((*MockOscPublicIpInterface)(nil).GetPublicIp), ctx, publicIpId)
}

// GetPublicIpByIp mocks base method.
func (m *MockOscPublicIpInterface) GetPublicIpByIp(ctx context.Context, publicIp string) (*osc.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicIpByIp", ctx, publicIp)
	ret0, _ := ret[0].(*osc.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicIpByIp indicates an expected call of GetPublicIpByIp.
func (mr *MockOscPublicIpInterfaceMockRecorder) GetPublicIpByIp(ctx, publicIp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicIpByIp", reflect.TypeOf((*MockOscPublicIpInterface)(nil).GetPublicIpByIp), ctx, publicIp)
}

// ListPublicIpsFromPool mocks base method.
func (m *MockOscPublicIpInterface) ListPublicIpsFromPool(ctx context.Context, pool string) ([]osc.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicIpsFromPool", ctx, pool)
	ret0, _ := ret[0].([]osc.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicIpsFromPool indicates an expected call of ListPublicIpsFromPool.
func (mr *MockOscPublicIpInterfaceMockRecorder) ListPublicIpsFromPool(ctx, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicIpsFromPool", reflect.TypeOf((*MockOscPublicIpInterface)(nil).ListPublicIpsFromPool), ctx, pool)
}

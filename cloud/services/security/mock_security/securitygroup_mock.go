// Code generated by MockGen. DO NOT EDIT.
// Source: ./securitygroup.go

// Package mock_security is a generated GoMock package.
package mock_security

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	osc "github.com/outscale/osc-sdk-go/v2"
)

// MockOscSecurityGroupInterface is a mock of OscSecurityGroupInterface interface.
type MockOscSecurityGroupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOscSecurityGroupInterfaceMockRecorder
}

// MockOscSecurityGroupInterfaceMockRecorder is the mock recorder for MockOscSecurityGroupInterface.
type MockOscSecurityGroupInterfaceMockRecorder struct {
	mock *MockOscSecurityGroupInterface
}

// NewMockOscSecurityGroupInterface creates a new mock instance.
func NewMockOscSecurityGroupInterface(ctrl *gomock.Controller) *MockOscSecurityGroupInterface {
	mock := &MockOscSecurityGroupInterface{ctrl: ctrl}
	mock.recorder = &MockOscSecurityGroupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOscSecurityGroupInterface) EXPECT() *MockOscSecurityGroupInterfaceMockRecorder {
	return m.recorder
}

// CreateSecurityGroup mocks base method.
func (m *MockOscSecurityGroupInterface) CreateSecurityGroup(netId, clusterName, securityGroupName, securityGroupDescription, securityGroupTag string) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", netId, clusterName, securityGroupName, securityGroupDescription, securityGroupTag)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockOscSecurityGroupInterfaceMockRecorder) CreateSecurityGroup(netId, clusterName, securityGroupName, securityGroupDescription, securityGroupTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockOscSecurityGroupInterface)(nil).CreateSecurityGroup), netId, clusterName, securityGroupName, securityGroupDescription, securityGroupTag)
}

// CreateSecurityGroupRule mocks base method.
func (m *MockOscSecurityGroupInterface) CreateSecurityGroupRule(securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId string, fromPortRange, toPortRange int32) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRule", securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId, fromPortRange, toPortRange)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroupRule indicates an expected call of CreateSecurityGroupRule.
func (mr *MockOscSecurityGroupInterfaceMockRecorder) CreateSecurityGroupRule(securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId, fromPortRange, toPortRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRule", reflect.TypeOf((*MockOscSecurityGroupInterface)(nil).CreateSecurityGroupRule), securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId, fromPortRange, toPortRange)
}

// DeleteSecurityGroup mocks base method.
func (m *MockOscSecurityGroupInterface) DeleteSecurityGroup(securityGroupId string) (error, *http.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", securityGroupId)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(*http.Response)
	return ret0, ret1
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockOscSecurityGroupInterfaceMockRecorder) DeleteSecurityGroup(securityGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockOscSecurityGroupInterface)(nil).DeleteSecurityGroup), securityGroupId)
}

// DeleteSecurityGroupRule mocks base method.
func (m *MockOscSecurityGroupInterface) DeleteSecurityGroupRule(securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId string, fromPortRange, toPortRange int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId, fromPortRange, toPortRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule.
func (mr *MockOscSecurityGroupInterfaceMockRecorder) DeleteSecurityGroupRule(securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId, fromPortRange, toPortRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockOscSecurityGroupInterface)(nil).DeleteSecurityGroupRule), securityGroupId, flow, ipProtocol, ipRange, securityGroupMemberId, fromPortRange, toPortRange)
}

// GetSecurityGroup mocks base method.
func (m *MockOscSecurityGroupInterface) GetSecurityGroup(securityGroupId string) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", securityGroupId)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockOscSecurityGroupInterfaceMockRecorder) GetSecurityGroup(securityGroupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockOscSecurityGroupInterface)(nil).GetSecurityGroup), securityGroupId)
}

// GetSecurityGroupFromSecurityGroupRule mocks base method.
func (m *MockOscSecurityGroupInterface) GetSecurityGroupFromSecurityGroupRule(securityGroupId, Flow, IpProtocols, IpRanges, securityGroupMemberId string, FromPortRanges, ToPortRanges int32) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupFromSecurityGroupRule", securityGroupId, Flow, IpProtocols, IpRanges, securityGroupMemberId, FromPortRanges, ToPortRanges)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupFromSecurityGroupRule indicates an expected call of GetSecurityGroupFromSecurityGroupRule.
func (mr *MockOscSecurityGroupInterfaceMockRecorder) GetSecurityGroupFromSecurityGroupRule(securityGroupId, Flow, IpProtocols, IpRanges, securityGroupMemberId, FromPortRanges, ToPortRanges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupFromSecurityGroupRule", reflect.TypeOf((*MockOscSecurityGroupInterface)(nil).GetSecurityGroupFromSecurityGroupRule), securityGroupId, Flow, IpProtocols, IpRanges, securityGroupMemberId, FromPortRanges, ToPortRanges)
}

// GetSecurityGroupIdsFromNetIds mocks base method.
func (m *MockOscSecurityGroupInterface) GetSecurityGroupIdsFromNetIds(netId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupIdsFromNetIds", netId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupIdsFromNetIds indicates an expected call of GetSecurityGroupIdsFromNetIds.
func (mr *MockOscSecurityGroupInterfaceMockRecorder) GetSecurityGroupIdsFromNetIds(netId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupIdsFromNetIds", reflect.TypeOf((*MockOscSecurityGroupInterface)(nil).GetSecurityGroupIdsFromNetIds), netId)
}

apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: "${CLUSTER_NAME}"
  labels:
    cni: "${CLUSTER_NAME}-crs-cni"
    ccm: "${CLUSTER_NAME}-crs-ccm"
spec:
  clusterNetwork:
    pods:
      cidrBlocks: ["10.42.0.0/16"]
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: OscCluster
    name: "${CLUSTER_NAME}"
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OscCluster
metadata:
  name: "${CLUSTER_NAME}"
spec:
  network:
    subregionName: ${OSC_REGION}a
    subnets:
    - ipSubnetRange: 10.0.2.0/24
      roles:
      - loadbalancer
      - nat
      subregionName: ${OSC_REGION}a
    - ipSubnetRange: 10.0.3.0/24
      roles:
      - worker
      subregionName: ${OSC_REGION}a
    - ipSubnetRange: 10.0.4.0/24
      roles:
      - controlplane
      subregionName: ${OSC_REGION}a
    - ipSubnetRange: 10.0.5.0/24
      roles:
      - nat
      subregionName: ${OSC_REGION}b
    - ipSubnetRange: 10.0.6.0/24
      roles:
      - worker
      subregionName: ${OSC_REGION}b
    - ipSubnetRange: 10.0.7.0/24
      roles:
      - controlplane
      subregionName: ${OSC_REGION}b
    loadBalancer:
      loadbalancername: "${CLUSTER_NAME}-k8s"
    bastion:
      enable: false
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-a"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
  template:
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-md"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${CLUSTER_NAME}-md-a"
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: OscMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OscMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-a"
spec:
  template:
    spec:
      node:
        image:
          name: "${KUBERNETES_IMAGE_UPGRADE_FROM}"
          outscaleOpenSource: true
        vm:
          rootDisk:
            rootDiskSize: ${OSC_VOLUME_SIZE}
            rootDiskIops: ${OSC_IOPS}
            rootDiskType: "${OSC_VOLUME_TYPE}"
          keypairName: "${OSC_KEYPAIR_NAME}"
          subregionName: ${OSC_REGION}a
          vmType: "${OSC_VM_TYPE}"
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-b"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
  template:
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-md"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${CLUSTER_NAME}-md-b"
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: OscMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OscMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-b"
spec:
  template:
    spec:
      node:
        image:
          name: "${KUBERNETES_IMAGE_UPGRADE_FROM}"
          outscaleOpenSource: true
        vm:
          rootDisk:
            rootDiskSize: ${OSC_VOLUME_SIZE}
            rootDiskIops: ${OSC_IOPS}
            rootDiskType: "${OSC_VOLUME_TYPE}"
          keypairName: "${OSC_KEYPAIR_NAME}"
          subregionName: ${OSC_REGION}b
          vmType: "${OSC_VM_TYPE}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OscMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      node:
        image:
          name: "${KUBERNETES_IMAGE_UPGRADE_FROM}"
          outscaleOpenSource: true
        vm:
          rootDisk:
            rootDiskSize: ${OSC_VOLUME_SIZE}
            rootDiskIops: ${OSC_IOPS}
            rootDiskType: "${OSC_VOLUME_TYPE}"
          subregionName: ${OSC_REGION}a
          keypairName: "${OSC_KEYPAIR_NAME}"
          role: controlplane
          vmType: "${OSC_VM_TYPE}"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: "${CLUSTER_NAME}-md"
spec:
  template:
    spec:
      files:
        - content: |
            #!/bin/sh

            curl https://github.com/opencontainers/runc/releases/download/v1.1.1/runc.amd64 -Lo /tmp/runc.amd64
            chmod +x /tmp/runc.amd64
            cp -f /tmp/runc.amd64 /usr/local/sbin/runc
          owner: root:root
          path: /tmp/set_runc.sh
          permissions: "0744"
      joinConfiguration:
        nodeRegistration:
          name: "{{ ds.meta_data.local_hostname }}"
          kubeletExtraArgs:
            cloud-provider: external
            provider-id: aws:///'{{ ds.meta_data.placement.availability_zone }}'/'{{ ds.meta_data.instance_id }}'
      preKubeadmCommands:
        - sh /tmp/set_runc.sh
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  machineTemplate:
    infrastructureRef:
      kind: OscMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: aws:///'{{ ds.meta_data.placement.availability_zone }}'/'{{ ds.meta_data.instance_id }}'
        name: '{{ ds.meta_data.local_hostname }}'
    files:
      - content: |
          #!/bin/sh

          curl https://github.com/opencontainers/runc/releases/download/v1.1.1/runc.amd64 -Lo /tmp/runc.amd64
          chmod +x /tmp/runc.amd64
          cp -f /tmp/runc.amd64 /usr/local/sbin/runc
        owner: root:root
        path: /tmp/set_runc.sh
        permissions: "0744"
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: aws:///'{{ ds.meta_data.placement.availability_zone }}'/'{{ ds.meta_data.instance_id }}'
    preKubeadmCommands:
      - sh /tmp/set_runc.sh
  version: "${KUBERNETES_VERSION}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "${CLUSTER_NAME}-crs-ccm"
data: ${CCM_RESOURCES}
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: "${CLUSTER_NAME}-crs-ccm"
spec:
  strategy: ApplyOnce
  clusterSelector:
    matchLabels:
      ccm: "${CLUSTER_NAME}-crs-ccm"
  resources:
    - name: "${CLUSTER_NAME}-crs-ccm"
      kind: ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "${CLUSTER_NAME}-crs-cni"
data: ${CNI_RESOURCES}
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: "${CLUSTER_NAME}-crs-cni"
spec:
  strategy: ApplyOnce
  clusterSelector:
    matchLabels:
      cni: "${CLUSTER_NAME}-crs-cni"
  resources:
    - name: "${CLUSTER_NAME}-crs-cni"
      kind: ConfigMap
